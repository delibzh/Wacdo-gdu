openapi: 3.0.3
info:
  title: API Wacdo
  version: 1.0.0
  description: |
    API pour gérer les utilisateurs, produits, menus et commandes de l'application Wacdo.
    Certaines routes nécessitent une authentification JWT selon les rôles.

servers:
  - url: http://localhost:3000/api

security:
  - bearerAuth: []

paths:
  /auth/register:
    post:
      summary: Inscription utilisateur
      tags: [Utilisateurs]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInput"
      responses:
        "201":
          description: Utilisateur créé

  /auth/login:
    post:
      summary: Connexion utilisateur
      tags: [Utilisateurs]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: Connexion réussie (token JWT)

    /auth/me:
    get:
      summary: Récupère les informations de l'utilisateur connecté
      tags: [Utilisateurs]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Informations de l'utilisateur
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                  username:
                    type: string
                  email:
                    type: string
                  role:
                    type: string
        "401":
          description: Token manquant ou invalide

    put:
      summary: Modifie les informations de l'utilisateur connecté
      tags: [Utilisateurs]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: Informations mises à jour
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserInput"
        "401":
          description: Token manquant ou invalide

    delete:
      summary: Supprime le compte de l'utilisateur connecté
      tags: [Utilisateurs]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Compte supprimé avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Compte supprimé avec succès"
        "401":
          description: Token manquant ou invalide

  /auth/users:
    get:
      summary: Liste des utilisateurs (admin)
      tags: [Utilisateurs]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Liste renvoyée

  /products:
    get:
      summary: Voir les produits
      tags: [Produits]
      responses:
        "200":
          description: Liste des produits

    post:
      summary: Créer un produit (admin)
      tags: [Produits]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductInput"
      responses:
        "201":
          description: Produit créé

  /products/{id}:
    get:
      summary: Voir un produit par ID
      tags: [Produits]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Produit trouvé

    put:
      summary: Modifier un produit (admin)
      tags: [Produits]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductInput"
      responses:
        "200":
          description: Produit modifié

    delete:
      summary: Supprimer un produit (admin)
      tags: [Produits]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "204":
          description: Produit supprimé

  /menus:
    get:
      summary: Voir les menus
      tags: [Menus]
      responses:
        "200":
          description: Liste des menus

    post:
      summary: Créer un menu (admin)
      tags: [Menus]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MenuInput"
      responses:
        "201":
          description: Menu créé

  /orders:
    post:
      summary: Créer une commande (admin, accueil)
      tags: [Commandes]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderInput"
      responses:
        "201":
          description: Commande créée

  /orders/{id}:
    get:
      summary: Voir une commande
      tags: [Commandes]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Commande trouvée

    put:
      summary: Modifier une commande
      tags: [Commandes]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderInput"
      responses:
        "200":
          description: Commande mise à jour

    delete:
      summary: Supprimer une commande (admin)
      tags: [Commandes]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "204":
          description: Commande supprimée

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    UserInput:
      type: object
      required: [username, email, password, role]
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
        role:
          type: string
          enum: [admin, accueil, preparation, client]

    ProductInput:
      type: object
      required: [title, description, price, category]
      properties:
        title:
          type: string
        description:
          type: string
        price:
          type: number
        imageUrl:
          type: string
        category:
          type: string
          enum: [Menu, Boisson, Dessert, Autre]
        available:
          type: boolean

    MenuInput:
      type: object
      required: [title, description, price, imageUrl, category]
      properties:
        title:
          type: string
        description:
          type: string
        price:
          type: number
        imageUrl:
          type: string
        category:
          type: string
          enum: [Menu, Formule, Offre]
        available:
          type: boolean

    OrderInput:
      type: object
      required: [products, totalPrice]
      properties:
        products:
          type: array
          items:
            type: string
        totalPrice:
          type: number
        clientInfo:
          type: object
        status:
          type: string
          enum: [en attente, préparation, prête, servie, annulée]
